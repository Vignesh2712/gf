// Copyright GoFrame Author(https://goframe.org). All Rights Reserved.
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file,
// You can obtain one at https://github.com/gogf/gf.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc3
// source: article/v1/article.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleRpc_GetArticle_FullMethodName    = "/article.ArticleRpc/GetArticle"
	ArticleRpc_CreateArticle_FullMethodName = "/article.ArticleRpc/CreateArticle"
)

// ArticleRpcClient is the client API for ArticleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleRpcClient interface {
	GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*GetArticleRes, error)
	CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleRes, error)
}

type articleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleRpcClient(cc grpc.ClientConnInterface) ArticleRpcClient {
	return &articleRpcClient{cc}
}

func (c *articleRpcClient) GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*GetArticleRes, error) {
	out := new(GetArticleRes)
	err := c.cc.Invoke(ctx, ArticleRpc_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleRes, error) {
	out := new(CreateArticleRes)
	err := c.cc.Invoke(ctx, ArticleRpc_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleRpcServer is the server API for ArticleRpc service.
// All implementations must embed UnimplementedArticleRpcServer
// for forward compatibility
type ArticleRpcServer interface {
	GetArticle(context.Context, *GetArticleReq) (*GetArticleRes, error)
	CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleRes, error)
	mustEmbedUnimplementedArticleRpcServer()
}

// UnimplementedArticleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedArticleRpcServer struct {
}

func (UnimplementedArticleRpcServer) GetArticle(context.Context, *GetArticleReq) (*GetArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleRpcServer) CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleRpcServer) mustEmbedUnimplementedArticleRpcServer() {}

// UnsafeArticleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleRpcServer will
// result in compilation errors.
type UnsafeArticleRpcServer interface {
	mustEmbedUnimplementedArticleRpcServer()
}

func RegisterArticleRpcServer(s grpc.ServiceRegistrar, srv ArticleRpcServer) {
	s.RegisterService(&ArticleRpc_ServiceDesc, srv)
}

func _ArticleRpc_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetArticle(ctx, req.(*GetArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).CreateArticle(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleRpc_ServiceDesc is the grpc.ServiceDesc for ArticleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticleRpc",
	HandlerType: (*ArticleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _ArticleRpc_GetArticle_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _ArticleRpc_CreateArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article/v1/article.proto",
}
